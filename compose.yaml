# Docker Compose file for Vapor
#
# Install Docker on your system to run and test
# your Vapor app in a production-like environment.
#
# Note: This file is intended for testing and does not
# implement best practices for a production deployment.
#
# Learn more: https://docs.docker.com/compose/reference/
#
#   Build images: docker-compose build
#      Start app: docker-compose up app
# Start database: docker-compose up db
# Run migrations: docker-compose run migrate
#       Stop all: docker-compose down (add -v to wipe db)
#
volumes:
  db_data:

x-shared_environment: &shared_environment
  LOG_LEVEL: ${LOG_LEVEL:-debug}
  DATABASE_HOST: db
  DATABASE_USERNAME: vapor_username
  DATABASE_PASSWORD: vapor_password

services:
  app:
    image: agqr-program-guide:latest
    build:
      context: .
    environment:
      <<: *shared_environment
      DATABASE_NAME: agqr_program_guide
      DATABASE_USE_SSL: true
    depends_on:
      - db
    ports:
      - '8080:8080'
    # user: '0' # uncomment to run as root for testing purposes even though Dockerfile defines 'vapor' user.
    command: ["serve", "--env", "development", "--hostname", "0.0.0.0", "--port", "8080"]
  dev:
    image: agqr-program-guide:latest
    platform: linux/amd64
    build:
      context: .
      target: develop
    environment:
      <<: *shared_environment
    depends_on:
      - db
  commands:
    image: agqr-program-guide:latest
    platform: linux/amd64
    build:
      context: .
    environment:
      <<: *shared_environment
      DATABASE_NAME: agqr_program_guide
      DATABASE_USE_SSL: true
    depends_on:
      - db
    command: ["--help"]
  db:
    image: postgres:15.5
    volumes:
      - db_data:/var/lib/postgresql
      - ./docker/db:/docker-entrypoint-initdb.d
      - ./docker/db/certs:/var/lib/postgresql/certs
      - ./docker/db/config/postgresql.conf:/etc/postgresql/postgresql.conf
      - ./docker/db/config/pg_hba.conf:/etc/postgresql/pg_hba.conf
    environment:
      POSTGRES_USER: vapor_username
      POSTGRES_PASSWORD: vapor_password
    ports:
      - '5432:5432'
    command: postgres -c config_file=/etc/postgresql/postgresql.conf -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "vapor_username"]
      interval: 10s
      timeout: 30s
      retries: 5
      start_period: 30s
